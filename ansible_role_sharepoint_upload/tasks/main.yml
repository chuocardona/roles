---
# tasks file for ansible_sharepoint_upload
- name: Mandatory Variables check
  block:
    - name: Test Debug - WILL BE REMOVED
      ansible.builtin.debug:
        msg:
          - "{{ sp_teams_notification }}"
          - "{{ webhook_url }}"
          - "{{ sp_client_id is defined }}"
          - "{{ sp_client_secret is defined }}"
          - "{{ sharepoint_root_folder }}"
          - "{{ sharepoint_site_url }}"

    - name: Check mandatory variables
      ansible.builtin.debug:
        msg:
          - "[{{ 'webhook_url ERROR' if ((sp_teams_notification) and (webhook_url == 'NA')) else 'webhook_url OK' }}]"
          - "[{{ 'sp_client_id OK' if (sp_client_id is defined) else 'sp_client_id ERROR' }}]"
          - "[{{ 'sp_client_secret OK' if (sp_client_secret is defined) else 'sp_client_secret ERROR' }}]"
          - "[{{ 'sharepoint_root_folder OK' if not (sharepoint_root_folder == '') else 'sharepoint_root_folder ERROR' }}]"
          - "[{{ 'sharepoint_site_url OK' if not (sharepoint_site_url == '') else 'sharepoint_site_url ERROR' }}]"
      failed_when:
        - ((sp_teams_notification) and (webhook_url == 'NA')) or
          not (sp_client_id is defined) or not (sp_client_secret is defined) or
          (sharepoint_root_folder == '') or
          (sharepoint_site_url == '')

    - name: Initialize exec_rc
      ansible.builtin.set_fact:
        exec_rc: 0

  rescue:
    - name: Mandatory variables error
      ansible.builtin.set_fact:
        exec_success: false
        exec_changed: false
        exec_rc: 201
        exec_message: "Mandatory variables are not/improperly configured"

- name: Upload block
  when:
    - not(download_from_sp)
    - not(delete_file_from_sp)
    - not(exec_rc == 201)
  block:
    - name: Check mandatory variables
      ansible.builtin.debug:
        msg:
          - "[{{ 'tower_src_path OK' if (not (tower_src_path == '')) else 'tower_src_path ERROR' }}]"
          - "[{{ 'sp_dir_create ERROR' if ((create_folder_in_sp) and (sp_dir_create == '')) else 'sp_dir_create OK' }}]"
          - "[{{ 'create_subfolder_in_sp ERROR' if ((subfolder_name == '') and (create_subfolder_in_sp)) else 'create_subfolder_in_sp OK' }}]"
      failed_when:
        - (tower_src_path == '') or ((create_folder_in_sp) and (sp_dir_create == '')) or
          ((create_subfolder_in_sp) and (subfolder_name == ''))

    - name: Find files for upload
      block:
        - name: Recursively find files under tower dir
          ansible.builtin.find:
            paths: "{{ tower_src_path }}"
            recurse: true
          register: to_be_uploaded

      rescue:
        - name: Find files - failed
          ansible.builtin.set_fact:
            exec_success: false
            exec_changed: false
            exec_rc: 202
            exec_message: "Failed to find files under {{ tower_src_path }}"

        - name: Fail job
          ansible.builtin.fail:

    - name: Files to be uploaded count == 0
      when: to_be_uploaded.files | count == 0
      block:
        - name: No files found for upload
          ansible.builtin.debug:
            msg: "Unable to find files under {{ tower_src_path }}"

        - name: No files found for upload - failed
          ansible.builtin.set_fact:
            exec_success: false
            exec_changed: false
            exec_rc: 203
            exec_message: "No files found under {{ tower_src_path }}"
            upload_success: false

        - name: Log lines to MS Teams - no files found for upload
          ansible.builtin.uri:
            url: "{{ webhook_url }}"
            body: "{{ message }}"
            body_format: json
            method: POST
          vars:
            message: "{{ lookup('template', '../templates/sharepoint_upload_status.j2') }}"
            sharepoint_upload_status_msg: "Not Applicable - No files found for upload under {{ tower_src_path }}"
            sharepoint_download_url: "NA"
            tower_job_suffix: "#/jobs/{{ tower_job_id }}"
            teams_summary: "{{ teams_notification_summary }}"
            teams_title: "{{ teams_notification_title }}"
          when:
            - sp_teams_notification
            - not(webhook_url == 'NA')

    - name: Files to be uploaded count > 0
      when: to_be_uploaded.files | count > 0
      block:
        - name: SharePoint upload
          block:
            - name: Set tokens for sharepoint access
              ansible.builtin.include_tasks: set_tokens_for_sharepoint_upload.yml

            - name: Create folder in sharepoint
              ansible.builtin.include_tasks: create_folder_in_sharepoint.yml
              when:
                - create_folder_in_sp or create_custom_folder

            - name: Create subfolder in sharepoint
              ansible.builtin.include_tasks: create_subfolder_in_sp.yml
              when: create_subfolder_in_sp

            - name: Upload files
              ansible.builtin.include_tasks: sharepoint_upload.yml
              with_items: "{{ to_be_uploaded.files }}"

            - name: Set sharepoint URL
              ansible.builtin.set_fact:
                final_sp_url: "{{ sharepoint_site_url }}/{{ sharepoint_root_folder }}/{{ sp_dir_create }}"

            - name: Log lines to MS Teams - files uploaded
              ansible.builtin.uri:
                url: "{{ webhook_url }}"
                body: "{{ message }}"
                body_format: json
                method: POST
              vars:
                message: "{{ lookup('template', '../templates/sharepoint_upload_status.j2') }}"
                sharepoint_upload_status_msg: "Success"
                sharepoint_download_url: "{{ final_sp_url }}"
                tower_job_suffix: "#/jobs/{{ tower_job_id }}"
                teams_summary: "{{ teams_notification_summary }}"
                teams_title: "{{ teams_notification_title }}"
              when:
                - sp_teams_notification
                - not(webhook_url == 'NA')

            - name: Files Uploaded
              ansible.builtin.set_fact:
                upload_success: true
                exec_success: true
                exec_changed: true
                exec_rc: 0
                exec_message: "Files have been uploaded to {{ final_sp_url }}"

          rescue:
            - name: Sharepoint upload - failed
              ansible.builtin.set_fact:
                exec_success: false
                exec_changed: false
                exec_rc: 204
                exec_message: |
                  - Failed Task - "{{ ansible_failed_task.name }}"
                  - Error - "{% if (ansible_failed_result.stderr is defined) %}{{ ansible_failed_result.stderr }}
                    {% elif (ansible_failed_result.response is defined) %}{{ ansible_failed_result.response }}
                    {% elif (ansible_failed_result.msg is defined) %}{{ ansible_failed_result.msg }}
                    {% elif (ansible_failed_result.stdout is defined) %}{{ ansible_failed_result.stdout }}
                    {% else %}{{ "Please refer to the job log for more details" }}{% endif %}"
                upload_success: false

            - name: Log lines to MS Teams - upload failed
              ansible.builtin.uri:
                url: "{{ webhook_url }}"
                body: "{{ message }}"
                body_format: json
                method: POST
              vars:
                message: "{{ lookup('template', '../templates/sharepoint_upload_status.j2') }}"
                sharepoint_upload_status_msg: 'Failed'
                sharepoint_download_url: "NA"
                tower_job_suffix: "#/jobs/{{ tower_job_id }}"
                teams_summary: "{{ teams_notification_summary }}"
                teams_title: "{{ teams_notification_title }}"
              when:
                - sp_teams_notification
                - not (webhook_url == 'NA')

- name: Download block
  when:
    - download_from_sp
    - not(exec_rc == 201)
  block:
    - name: Check mandatory variables
      ansible.builtin.debug:
        msg:
          - "[{{ 'download_file_name OK' if (download_file_name | length > 0) else 'download_file_name ERROR' }}]"
          - "[{{ 'download_folder_name OK' if (not (download_folder_name == '')) else 'download_folder_name ERROR' }}]"
      failed_when:
        - (download_folder_name == '') or (download_file_name == '')

    - name: Set tokens for sharepoint access
      ansible.builtin.include_tasks: set_tokens_for_sharepoint_upload.yml

    - name: Download file
      ansible.builtin.include_tasks: sharepoint_download.yml

  rescue:
    - name: Sharepoint download - failed
      ansible.builtin.set_fact:
        exec_success: false
        exec_changed: false
        exec_rc: 204
        exec_message: |
          - Failed Task - "{{ ansible_failed_task.name }}"
          - Error - "{% if (ansible_failed_result.stderr is defined) %}{{ ansible_failed_result.stderr }}
            {% elif (ansible_failed_result.response is defined) %}{{ ansible_failed_result.response }}
            {% elif (ansible_failed_result.msg is defined) %}{{ ansible_failed_result.msg }}
            {% elif (ansible_failed_result.stdout is defined) %}{{ ansible_failed_result.stdout }}
            {% else %}{{ "Please refer to the job log for more details" }}{% endif %}"
        download_success: false

- name: Delete file from SharePoint
  when:
    - delete_file_from_sp
    - not(exec_rc == 201)
  block:
    - name: Check mandatory variables
      ansible.builtin.debug:
        msg:
          - "[{{ 'delete_folder_name OK' if not (delete_folder_name == '') else 'delete_folder_name ERROR' }}]"
          - "[{{ 'delete_file_name OK' if (delete_file_name | length > 0) else 'delete_file_name ERROR' }}]"
      failed_when:
        - not (delete_file_name | length > 0)

    - name: Set tokens for sharepoint access
      ansible.builtin.include_tasks: set_tokens_for_sharepoint_upload.yml

    - name: Delete file
      ansible.builtin.include_tasks: sharepoint_delete_file.yml

    - name: Delete success
      when: delete_success
      block:
        - name: Log lines to MS Teams - All given files deleted
          ansible.builtin.uri:
            url: "{{ webhook_url }}"
            body: "{{ message }}"
            body_format: json
            method: POST
          vars:
            message: "{{ lookup('template', '../templates/sharepoint_delete_status.j2') }}"
            sharepoint_delete_status_msg: "Success"
            sharepoint_deleted_files: "{{ delete_success_file }}"
            sharepoint_delete_failed_files: "NA"
            tower_job_suffix: "#/jobs/{{ tower_job_id }}"
            teams_summary: "{{ teams_notification_summary }}"
            teams_title: "{{ teams_notification_title }}"

        - name: Delete success
          ansible.builtin.set_fact:
            exec_success: true
            exec_changed: true
            exec_rc: 0
            exec_message: "Files have been deleted from SharePoint"

    - name: Delete failed
      when: not delete_success
      block:
        - name: Log lines to MS Teams - All given files deleted
          ansible.builtin.uri:
            url: "{{ webhook_url }}"
            body: "{{ message }}"
            body_format: json
            method: POST
          vars:
            message: "{{ lookup('template', '../templates/sharepoint_delete_status.j2') }}"
            sharepoint_delete_status_msg: "Failed"
            sharepoint_deleted_files: "{{ delete_success_file }}"
            sharepoint_delete_failed_files: "{{ delete_failed_file }}"
            tower_job_suffix: "#/jobs/{{ tower_job_id }}"
            teams_summary: "{{ teams_notification_summary }}"
            teams_title: "{{ teams_notification_title }}"

        - name: Delete failed
          ansible.builtin.set_fact:
            exec_success: false
            exec_changed: false
            exec_rc: 204
            exec_message:
              - "Failed to delete file(s) from SharePoint"
              - "Failed to delete file(s) - {{ delete_failed_file }}"
              - "Successfully deleted file(s) - {{ delete_success_file }}"

  rescue:
    - name: Sharepoint delete - failed
      ansible.builtin.set_fact:
        exec_success: false
        exec_changed: false
        exec_rc: 204
        exec_message: |
          - Failed Task - "{{ ansible_failed_task.name }}"
          - Error - "{% if (ansible_failed_result.stderr is defined) %}{{ ansible_failed_result.stderr }}
            {% elif (ansible_failed_result.response is defined) %}{{ ansible_failed_result.response }}
            {% elif (ansible_failed_result.msg is defined) %}{{ ansible_failed_result.msg }}
            {% elif (ansible_failed_result.stdout is defined) %}{{ ansible_failed_result.stdout }}
            {% else %}{{ "Please refer to the job log for more details" }}{% endif %}"
        delete_success: false
