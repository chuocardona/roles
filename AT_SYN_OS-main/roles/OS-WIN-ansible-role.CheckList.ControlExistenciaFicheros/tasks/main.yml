---
- name: Check Lectures LOCAL
  block:
    - name: Get date
      ansible.builtin.set_fact:
        file_name: "Lectures{{ lookup('pipe', 'date +%Y-%m-%d') }}.txt"
    - name: Get current_epoch
      ansible.builtin.set_fact:
        current_epoch: "{{ lookup('pipe', 'date +%s') }}"

    - name: Check local files
      ansible.windows.win_stat:
        path: '{{ file_path }}{{ file_name }}'
      register: file_found
      
    - name: Check status
      ansible.windows.win_stat:
        path: '{{ file_path }}{{ file_name }}'
      failed_when: not file_found.stat.exists or (current_epoch | int - file_found.stat.lastwritetime > 21600)
  
    - name: DEBUG
      ansible.builtin.debug:
        msg: "{{ file_found }}"
  rescue:
    - name: DEBUG
      ansible.builtin.debug:
        msg: "ERROR "
    - name: failed
      ansible.builtin.set_fact:
        tk_result: 'NoPass'
        tk_result_description: 'Fichero no existe en el servidor o la fecha de ult. modificacion no es correcta'
        azure_check: true
  always:
    - name: Collect task results
      set_fact:
        arr_results: >-
          {{ arr_results | default([]) + 
          [[
            checklist_code,
            "Control ficheros",
            1,
            "Control existencia ficheros LOCAL",
            tk_result_description | default('NO DESCRIPTION'),
            tk_result | default('NO TASK RESULT'),
            server_hostname
          ]] }}

- name: Check Lectures AZURE
  block:
    - name: Gather DNS server addresses
      win_shell: Get-DnsClientServerAddress | Select-Object -ExpandProperty ServerAddresses
      register: dns_settings

    - name: Display DNS server addresses
      debug:
        msg: "The DNS servers for host {{ inventory_hostname }} are: {{ dns_settings.stdout_lines }}"

    - name: Check if exists in azure
      ansible.windows.win_uri:
        url: "{{ azure_url }}{{ file_name }}{{ sas_url}}"
        method: HEAD
        return_content: false
        validate_certs: false
        status_code: [200, 404] 
      register: file_check_result
      failed_when: file_check_result.status_code is defined and file_check_result.status_code != 200

    - name: DEBUG
      ansible.builtin.debug:
        msg: "COPIANDO FICHERO DESDE AZURE A LOCAL "
      when: file_check_result.status == 200
  rescue:
    - name: failed
      set_fact:
        tk_result: 'NoPass'
        tk_result_description: "Fichero no existe en la ruta de azure"
        file_in_azure: false
        execution_result: 'NOOK'
  when: azure_check
  always:
    - name: debug
      ansible.builtin.debug: 
        msg: "{{ tk_result }} {{ tk_result_description }}"

    - name: Collect task results
      set_fact:
        arr_results: >-
          {{ arr_results | default([]) + 
          [[
            checklist_code,
            "Control ficheros",
            2,
            "Control existencia ficheros AZURE",
            tk_result_description | default('NO DESCRIPTION'),
            tk_result | default('NO TASK RESULT'),
            server_hostname
          ]] }}
