---
# OBJETIVO: Este playbook (OS-WIN-ansible-role.CheckList.Averias) está diseñado para realizar una serie de tareas relacionadas con:
#            - Verificación de archivos en hosts Windows.
#            - Generación de un archivo CSV con resultados.
#            - Carga de resultados a SharePoint.

- name: PLAYBOOK CONTROL EXISTENCIA FICHEROS
  hosts: SRVMDCPRO03
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: ntlm
    ansible_port: 5985  # HTTP
    ansible_user: ansible
    ansible_password: Zaq12wsx
  tasks:
    - name: Probando conexión con win_ping
      ansible.windows.win_ping:  
    - name: CHECKLIST
      ansible.builtin.include_role:
        name: OS-WIN-ansible-role.CheckList.ControlExistenciaFicheros

- name: Prepare CSV output directory
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    job_id: "{{ tower_job_id | default(683) }}"
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
  tasks:
    - name: Ensure base output directory exists
      ansible.builtin.file:
        path: "/tmp/dashboard_out"
        state: directory
        mode: '0755'

    - name: Ensure job-specific output directory exists
      ansible.builtin.file:
        path: "{{ tower_src_path }}"
        state: directory
        mode: '0755'

    - name: Debug directory information
      ansible.builtin.debug:
        msg:
          - "Base directory: /tmp/dashboard_out"
          - "Job-specific directory: {{ tower_src_path }}"

- name: Process results and call CSV Dashboard role
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    checklist_code: 'CHK-0044'
    job_id: "{{ tower_job_id | default(683) }}"
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
  tasks:
    - name: Initialize all_host_results
      ansible.builtin.set_fact:
        all_host_results: []
     
    - name: Set windows_hosts fact
      ansible.builtin.set_fact:
        windows_hosts: "{{ [inventory_hostname] if inventory_hostname == 'SRVMDCPRO03' else groups['windows']|default([]) }}"
     
    - name: Collect results from Windows hosts
      ansible.builtin.set_fact:
        all_host_results: "{{ all_host_results + hostvars[item]['arr_results']|default([]) }}"
      loop: "{{ windows_hosts|default([]) }}"
      when: 
        - hostvars[item] is defined
        - hostvars[item]['arr_results'] is defined
    
    - name: Create placeholder file if no results
      ansible.builtin.copy:
        content: "No results found in this execution"
        dest: "{{ tower_src_path }}/no_results.txt"
      when: all_host_results | length == 0
        
    - name: Call OS-LINUX-ansible-role.CSV.Dashboard for each result
      include_role:
        name: OS-LINUX-ansible-role.CSV.Dashboard
      vars:
        fase: "create"
        checklist_code: "{{ item[0] }}"
        task_name: "{{ item[1] }}"
        task_code: "{{ item[2] }}"
        task_description: "{{ item[3] }}"
        task_result_description: "{{ item[4] }}"
        task_result: "{{ item[5] }}"
      loop: "{{ all_host_results }}"
      when: all_host_results | length > 0

- name: Upload Files to Sharepoint
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    job_id: "{{ tower_job_id | default(683) }}"
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
    sharepoint_site_url: 'https://kyndryl.sharepoint.com/teams/EnterpriseClientUnit-Ind.GenericTeam'

  tasks:
    - name: Validate upload directory
      block:
        - name: Check if files exist in SharePoint upload directory
          ansible.builtin.stat:
            path: "{{ tower_src_path }}"
          register: sp_upload_directory
          ignore_errors: yes

        - name: Debug upload directory information
          ansible.builtin.debug:
            msg: 
              - "Upload directory: {{ tower_src_path }}"
              - "Directory exists: {{ sp_upload_directory.stat.exists | default(false) }}"
              - "Is directory: {{ sp_upload_directory.stat.isdir | default(false) }}"

        - name: List directory contents
          ansible.builtin.shell: 
            cmd: "ls -la {{ tower_src_path }}"
          register: directory_contents
          ignore_errors: yes

        - name: Show directory contents
          ansible.builtin.debug:
            var: directory_contents

    - name: Upload to SharePoint
      block:
        - name: Validate upload prerequisites
          ansible.builtin.assert:
            that:
              - sp_upload_directory.stat is defined
              - sp_upload_directory.stat.exists
              - sp_upload_directory.stat.isdir
            fail_msg: "SharePoint upload prerequisites not met"

        - name: Include SharePoint upload role
          ansible.builtin.include_role:
            name: ansible_role_sharepoint_upload
          vars:
            sp_client_id: "67b44fac-c6b7-42b3-b2c9-2c1a56266f5f"
            sp_client_secret: "ouV8Q~9xUZjQyOUFsSA3c6ngtrz.ZnIi1P03ubWW"
            sp_site_url: "{{ sharepoint_site_url }}"
            sp_folder_path: "at_role/Checklist"
            local_file_path: "{{ tower_src_path }}"
          register: sp_upload_result
          when: 
            - sp_upload_directory.stat.exists | default(false)
            - sp_upload_directory.stat.isdir | default(false)

      rescue:
        - name: Log SharePoint upload failure
          ansible.builtin.debug:
            msg: 
              - "SharePoint upload failed"
              - "Error details: {{ ansible_failed_result }}"
              - "Upload directory: {{ tower_src_path }}"
              - "Directory exists: {{ sp_upload_directory.stat.exists | default('Unknown') }}"
              - "Is directory: {{ sp_upload_directory.stat.isdir | default('Unknown') }}"

    - name: Cleanup uploaded files
      block:
        - name: Remove local files after successful upload
          ansible.builtin.file:
            path: "{{ tower_src_path }}"
            state: absent
          when: 
            - sp_upload_result is defined
            - sp_upload_result.changed | default(false)
      rescue:
        - name: Log file removal error
          ansible.builtin.debug:
            msg: "Error removing uploaded files: {{ ansible_failed_result }}"

    - name: Final notification
      ansible.builtin.debug:
        msg: >
          SharePoint upload process completed. 
          Upload status: {{ sp_upload_result.changed | default('Not attempted') }}. 
          Files location: {{ tower_src_path }}
