---
# OBJETIVO: Este playbook (OS-WIN-ansible-role.CheckList.Averias) está diseñado para realizar una serie de tareas relacionadas con:
#            - Verificación de archivos en hosts Windows.
#            - Generación de un archivo CSV con resultados.
#            - Carga de resultados a SharePoint.
#
# ESCENARIO: Entorno de ejecución controlado desde la máquina de salto de Agbar (Aigües de Barcelona).
#
# REQUISITOS: 
#     - Ejecución desde el servidor de salto corporativo de Aigües de Barcelona.
#     - Conexión a hosts Windows con credenciales adecuadas.
#     - Acceso al storage blob de Azure y a SharePoint.
#
# INVENTARIO-CONFIG:
#     Grupos:
#         - <tricode>_grp_INRA_AZURE  # Reemplazar <tricode> con el identificador del entorno
#     Group_vars:
#         - azure_url: "https://mdmabpro01sa.file.core.windows.net/sicab/MDMAB/Lectures/"   ## URL fija del storage de Azure  (string)
#         - file_path: "\\srvdfs01\APLICACIONES\BIG_DATA_MDMB_PRO\MDMAB\Lectures\"          ## Share del servidor local donde buscar el fichero inicialmente (string)
#         - sharepoint_site_url: "https://kyndryl.sharepoint.com/teams/EnterpriseClientUnit-Ind.GenericTeam" ## URL del sharepoint  (string)
#         - server_hostname: srvtsadmpro01.agbar.ga.local         ## servidor Windows que se está gestionando (string)
#         - tower_src_path: "/tmp/dashboard_out/{{ tower_job_id }}" ## Define la ruta local (en el nodo de control) donde se almacenan los archivos generados por el playbook (ej: CSV de resultados) (string)
#
# CREDENCIALES-REQs:  # Valores sensibles (usar Ansible Vault)
#     - sp_client_id: "<client_id_sharepoint>"           # ID de cliente para autenticación en SharePoint (string)
#     - sp_client_secret: "<client_secret_sharepoint>"   # Secret para autenticación (string)
#     - sas_url: "<cadena_SAS_azure>"                    # Cadena SAS para acceso al blob storage de Azure (string)
#
# INPUT-VARs-REQs:    # Variables obligatorias pasadas en tiempo de ejecución
#     - job_id:  # ID único de ejecución (integer)
#
# INPUT-VARs-OPTs:    # Variables opcionales con valores por defecto
#     - delegate_launch_node_linux: "localhost"  # Nodo de ejecución para tareas Linux
#     - gsma_code: "SYN"  # Código GSMA por defecto Se usa como nombre de carpeta principal dentro de la estructura de SharePoint (string) 
#
# NOTAS:
#     - Las credenciales (sp_client_id, sp_client_secret, sas_url) deben encriptarse con Ansible Vault.
#     - La ruta `file_path` puede modificarse desde el inventario si es necesario.
#     - Para la ejecucion de este playbook llama a dos roles OS-LINUX-ansible-role.CSV.Dashboard  y role_sharepoint_upload 
#
#
#
- name: PLAYBOOK CONTROL EXISTENCIA FICHEROS
  hosts: SRVMDCPRO03
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: ntlm
    ansible_port: 5985  # HTTP
    ansible_user: ansible
    ansible_password: Zaq12wsx
  tasks:
    - name: Probando conexión con win_ping
      ansible.windows.win_ping:  
    - name: CHECKLIST
      ansible.builtin.include_role:
        name: OS-WIN-ansible-role.CheckList.ControlExistenciaFicheros

- name: Process results and call CSV Dashboard role
  hosts: localhost  # Ejecutar en localhost
  connection: local  # Forzar conexión local
  gather_facts: no   # No necesitamos facts para esta tarea
  vars:
    checklist_code: 'CHK-0044'
    job_id: "{{ tower_job_id | default(630) }}"  # Usar tower_job_id si está definido
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
  tasks:
    - name: Initialize all_host_results
      set_fact:
        all_host_results: []        
     
    - name: Collect results from Windows hosts
      set_fact:
        all_host_results: "{{ all_host_results + hostvars[item]['arr_results']|default([]) }}"
      loop: "{{ groups['windows']|default([]) }}"
      when: hostvars[item] is defined and hostvars[item]['arr_results'] is defined
      
    # Asegurar que el directorio existe con shell local
    - name: Ensure directory for outputs exists
      shell: 
        cmd: "mkdir -p {{ tower_src_path }}"
      args:
        executable: /bin/bash

    - name: Create placeholder file if no results
      shell: 
        cmd: "echo 'No results found for this execution' > {{ tower_src_path }}/no_results.txt"
      args:
        executable: /bin/bash
      when: all_host_results | length == 0
        
    - name: Call OS-LINUX-ansible-role.CSV.Dashboard for each result
      include_role:
        name: OS-LINUX-ansible-role.CSV.Dashboard
      vars:
        fase: "create"
        checklist_code: "{{ item[0] }}"
        task_name: "{{ item[1] }}"
        task_code: "{{ item[2] }}"
        task_description: "{{ item[3] }}"
        task_result_description: "{{ item[4] }}"
        task_result: "{{ item[5] }}"
      loop: "{{ all_host_results }}"
      when: all_host_results | length > 0

- name: Upload Files to Sharepoint
  hosts: localhost  # Ejecutar en localhost
  connection: local  # Forzar conexión local
  gather_facts: no   # No necesitamos facts para esta tarea
  vars:
    job_id: "{{ tower_job_id | default(630) }}"
    create_folder_in_sp: false
    create_custom_folder: false 
    custom_folder_name: "{{ gsma_code }}"
    upload_to_custom_folder: false
    create_subfolder_in_sp: false
    subfolder_name: "Checklist"
    upload_to_subfolder: true
    sharepoint_root_folder: 'at_role'
    sharepoint_site_url: 'https://kyndryl.sharepoint.com/teams/EnterpriseClientUnit-Ind.GenericTeam'
    sp_teams_notification: false
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
 
  tasks:
    # Verificar que el directorio existe utilizando shell para mayor compatibilidad
    - name: Verify directory exists
      shell: 
        cmd: "[ -d {{ tower_src_path }} ] && echo 'exists' || echo 'not_exists'"
      args:
        executable: /bin/bash
      register: dir_check

    # Si el directorio no existe, crear un archivo de muestra para evitar errores
    - name: Create directory if it doesn't exist
      shell: 
        cmd: "mkdir -p {{ tower_src_path }}"
      args:
        executable: /bin/bash
      when: dir_check.stdout == 'not_exists'
          
    - name: Create placeholder file
      shell: 
        cmd: "echo 'Placeholder file created by playbook' > {{ tower_src_path }}/placeholder.txt"
      args:
        executable: /bin/bash
      when: dir_check.stdout == 'not_exists'

    - name: Upload to sharepoint
      ansible.builtin.include_role:
        name: ansible_role_sharepoint_upload
      register: sp_upload_result
      vars:
        sp_client_id: "{{ username }}"
        sp_client_secret: "{{ key }}"
      # Añadir manejo de errores
      ignore_errors: true

    - name: Delete Output Files
      block:
        - name: Remove files using shell command
          shell: 
            cmd: "rm -rf {{ tower_src_path }}"
          args:
            executable: /bin/bash
          when: 
             - sp_upload_result is defined 
             - sp_upload_result is not none 
             - sp_upload_result.failed | default(false) == false
      rescue:
        - name: Fallback removal method
          shell: 
            cmd: "rm -rf {{ tower_src_path }}"
          args:
            executable: /bin/bash
