 ---
# OBJETIVO: Este playbook (OS-WIN-ansible-role.CheckList.Averias) está diseñado para realizar una serie de tareas relacionadas con:
#            - Verificación de archivos en hosts Windows.
#            - Generación de un archivo CSV con resultados.
#            - Carga de resultados a SharePoint.

- name: PLAYBOOK CONTROL EXISTENCIA FICHEROS
  hosts: SRVMDCPRO03
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: ntlm
    ansible_port: 5985  # HTTP
    ansible_user: ansible
    ansible_password: Zaq12wsx
  tasks:
    - name: Probando conexión con win_ping
      ansible.windows.win_ping:  
    - name: CHECKLIST
      ansible.builtin.include_role:
        name: OS-WIN-ansible-role.CheckList.ControlExistenciaFicheros

- name: Prepare CSV output directory
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    job_id: "{{ tower_job_id | default(645) }}"
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
  tasks:
    - name: Ensure output directory exists (Local task)
      ansible.windows.win_shell: |
        if (-not (Test-Path -Path "{{ tower_src_path }}")) {
          New-Item -Path "{{ tower_src_path }}" -ItemType Directory -Force
        }

- name: Process results and call CSV Dashboard role
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    checklist_code: 'CHK-0044'
    job_id: "{{ tower_job_id | default(645) }}"
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
  tasks:
    - name: Initialize all_host_results
      ansible.builtin.set_fact:
        all_host_results: []
     
    - name: Set windows_hosts fact
      ansible.builtin.set_fact:
        windows_hosts: "{{ [inventory_hostname] if inventory_hostname == 'SRVMDCPRO03' else groups['windows']|default([]) }}"
     
    - name: Collect results from Windows hosts
      ansible.builtin.set_fact:
        all_host_results: "{{ all_host_results + hostvars[item]['arr_results']|default([]) }}"
      loop: "{{ windows_hosts|default([]) }}"
      when: 
        - hostvars[item] is defined
        - hostvars[item]['arr_results'] is defined
    
    - name: Create placeholder file if no results
      ansible.windows.win_shell: |
        Set-Content -Path "{{ tower_src_path }}/no_results.txt" -Value "No results found in this execution"
      when: all_host_results | length == 0
        
    - name: Call OS-LINUX-ansible-role.CSV.Dashboard for each result
      include_role:
        name: OS-LINUX-ansible-role.CSV.Dashboard
      vars:
        fase: "create"
        checklist_code: "{{ item[0] }}"
        task_name: "{{ item[1] }}"
        task_code: "{{ item[2] }}"
        task_description: "{{ item[3] }}"
        task_result_description: "{{ item[4] }}"
        task_result: "{{ item[5] }}"
      loop: "{{ all_host_results }}"
      when: all_host_results | length > 0

- name: Upload Files to Sharepoint
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    job_id: "{{ tower_job_id | default(645) }}"
    create_folder_in_sp: false
    create_custom_folder: false 
    custom_folder_name: "{{ gsma_code | default('SYN') }}"
    upload_to_custom_folder: false
    create_subfolder_in_sp: false
    subfolder_name: "Checklist"
    upload_to_subfolder: true
    sharepoint_root_folder: 'at_role'
    sharepoint_site_url: 'https://kyndryl.sharepoint.com/teams/EnterpriseClientUnit-Ind.GenericTeam'
    sp_teams_notification: false
    tower_src_path: "/tmp/dashboard_out/{{ job_id }}"
 
  tasks:
    # Verificar que el directorio existe
    - name: Verify directory existence
      ansible.windows.win_shell: |
        if (Test-Path -Path "{{ tower_src_path }}") {
          Write-Output "exists"
        } else {
          Write-Output "not_exists"
        }
      register: dir_check

    # Si el directorio no existe, crear un archivo de muestra para evitar errores
    - name: Create directory if it doesn't exist
      ansible.windows.win_shell: |
        New-Item -Path "{{ tower_src_path }}" -ItemType Directory -Force
      when: "'not_exists' in dir_check.stdout"
          
    - name: Create placeholder file
      ansible.windows.win_shell: |
        Set-Content -Path "{{ tower_src_path }}/placeholder.txt" -Value "Placeholder file created by playbook"
      when: "'not_exists' in dir_check.stdout"

    - name: Upload to sharepoint
      ansible.builtin.include_role:
        name: ansible_role_sharepoint_upload
      register: sp_upload_result
      vars:
        sp_client_id: "{{ username | default('') }}"
        sp_client_secret: "{{ key | default('') }}"
      # Añadir manejo de errores
      ignore_errors: true

    - name: Delete Output Files
      ansible.windows.win_shell: |
        Remove-Item -Path "{{ tower_src_path }}" -Recurse -Force
      when: 
         - sp_upload_result is defined 
         - sp_upload_result is not none 
         - sp_upload_result.failed | default(false) == false
