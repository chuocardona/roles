---
# OBJETIVO: Este playbook está diseñado para realizar una serie de tareas relacionadas con:
#            - Verificación de archivos en hosts Windows.
#            - Generación de un archivo CSV con resultados.
#            - Guardar resultados en AWX.

- name: PLAYBOOK CONTROL EXISTENCIA FICHEROS
  hosts: SRVMDCPRO03
  gather_facts: no
  vars:
    ansible_connection: winrm
    ansible_winrm_server_cert_validation: ignore
    ansible_winrm_transport: ntlm
    ansible_port: 5986  # HTTPS (conexión segura)
    ansible_user: ansible
    ansible_password: Zaq12wsx
  tasks:
    - name: Probando conexión con win_ping
      ansible.windows.win_ping:  
    - name: CHECKLIST
      ansible.builtin.include_role:
        name: OS-WIN-ansible-role.CheckList.ControlExistenciaFicheros

- name: Prepare CSV output directory and generate file
  hosts: localhost
  connection: local
  gather_facts: no
  become: no  # Importante: desactivamos "become" para evitar problemas de permisos
  vars:
    job_id: "{{ tower_job_id | default(649) }}"
    csv_dir: "/tmp/job"
    csv_file: "{{ csv_dir }}/control_existencia_ficheros_{{ job_id }}.csv"
  tasks:
    - name: Ensure output directory exists
      ansible.builtin.file:
        path: "{{ csv_dir }}"
        state: directory
        mode: '0755'
      register: dir_result
      ignore_errors: yes
      
    - name: Debug directory creation result
      ansible.builtin.debug:
        var: dir_result
        
    - name: Alternative - Create directory with shell
      ansible.builtin.shell: "mkdir -p {{ csv_dir }}"
      when: dir_result.failed is defined and dir_result.failed
      
    - name: Initialize all_host_results
      ansible.builtin.set_fact:
        all_host_results: []
     
    - name: Set windows_hosts fact
      ansible.builtin.set_fact:
        windows_hosts: ["SRVMDCPRO03"]
     
    - name: Collect results from Windows hosts
      ansible.builtin.set_fact:
        all_host_results: "{{ all_host_results + hostvars[item]['arr_results']|default([]) }}"
      loop: "{{ windows_hosts|default([]) }}"
      when: 
        - hostvars[item] is defined
        - hostvars[item]['arr_results'] is defined
    
    - name: Create placeholder file if no results
      ansible.builtin.shell: "echo 'No results found in this execution' > {{ csv_dir }}/no_results_{{ job_id }}.txt"
      when: all_host_results | length == 0
        
    - name: Generate CSV file with headers
      ansible.builtin.shell: "echo 'checklist_code,task_name,task_code,task_description,task_result_description,task_result' > {{ csv_file }}"
      when: all_host_results | length > 0
        
    - name: Append results to CSV file
      ansible.builtin.shell: "echo '{{ item[0] }},{{ item[1] }},{{ item[2] }},{{ item[3] }},{{ item[4] }},{{ item[5] }}' >> {{ csv_file }}"
      loop: "{{ all_host_results }}"
      when: all_host_results | length > 0

    - name: Display CSV file location
      ansible.builtin.debug:
        msg: "CSV file has been generated at {{ csv_file }}"
      when: all_host_results | length > 0

    - name: Show CSV file content
      ansible.builtin.shell: "cat /tmp/job/control_existencia_ficheros_{{ tower_job_id | default('718') }}.csv"
      register: csv_content
      delegate_to: localhost
  
    - name: Display CSV content
      ansible.builtin.debug:
      var: csv_content.stdout_lines
      delegate_to: localhost
